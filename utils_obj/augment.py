from skimage import featureimport globfrom skimage.io import imsave, imreadimport albumentations as Aimport cv2from skimage.io import imreadfrom skimage.filters import prewitt_h, prewitt_vimport matplotlib.pyplot as pltimport osaug_ext = ['_p', '_c', '_mr', '_r']def augment(path, final_path = None):    if final_path is None: # we augment and save in the same folder        final_path = path        label_final_path = path        if str(label_final_path).endswith('images'):            label_final_path = str(label_final_path).replace('images', 'labels')        else:            label_final_path = path    else: # we take images from path and put them in final path 8in the case of retrain for instance)        if str(final_path).endswith('images'):            label_final_path = str(final_path).replace('images', 'labels')        else:            label_final_path = final_path    # path is ..../train/images    if str(path).endswith('images'):        label_path = str(path).replace('images', 'labels')    else:        label_path=path    # path=input("Please enter absolute path to images and labels (they must be in the same folder):\n")    # below is albumentations augmentation by random process --2 different augmentation    transform = A.Compose([        A.RandomBrightnessContrast(p=0.4),        A.OneOf([            A.IAAAdditiveGaussianNoise(),            A.GaussNoise(),        ], p=0.3),        A.OneOf([            A.MotionBlur(p=.5),            A.MedianBlur(blur_limit=3, p=0.6),  # mrandom            A.Blur(blur_limit=3, p=0.6),        ], p=0.2),        A.HueSaturationValue(p=0.7),        A.RGBShift(p=0.6),        A.InvertImg(p=0.4),    ])    transform2 = A.Compose([        A.RandomBrightnessContrast(p=0.6),        A.OneOf([            A.IAAAdditiveGaussianNoise(),            A.GaussNoise(),        ], p=0.4),        A.OneOf([            A.MotionBlur(p=.2),            A.MedianBlur(blur_limit=3, p=0.1),            A.Blur(blur_limit=3, p=0.1),        ], p=0.2),        A.HueSaturationValue(),        A.RGBShift(),    ])    for image_file in glob.iglob(path + '/*.jpg'):        name = os.path.basename(image_file)        # copy the  original image too in the final path        orig = imread(image_file)        imsave(os.path.join(final_path,name), orig)        # feature extractions        # below is prewit kernel to exaggarate edges        # Generate noisy image of a square        im = imread(image_file, as_gray=True)        edges_prewitt_horizontal = prewitt_h(im)        edges_prewitt_vertical = prewitt_v(im)        imsave(os.path.join(final_path,name[:-4].replace('_original', '') + '_p.jpg'), edges_prewitt_vertical, cmap='gray')        # Compute the Canny filter for two values of sigma        # below is canny edge detection        im = imread(image_file, as_gray=True)        edges1 = feature.canny(im)        plt.imsave(os.path.join(final_path,name[:-4].replace('_original', '') + '_c.jpg'), edges1, cmap=plt.cm.gray)        # below two are albumentations images        image = cv2.imread(image_file)        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)        transformed = transform(image=image)        transformed_image = transformed["image"]        cv2.imwrite(os.path.join(final_path,name[:-4].replace('_original', '') + '_mr.jpg'), transformed_image)        image = cv2.imread(image_file)        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)        transformed2 = transform2(image=image)        transformed2_image = transformed2["image"]        cv2.imwrite(os.path.join(final_path,name[:-4].replace('_original', '')) + '_r.jpg', transformed2_image)    print("Image Conversion done!\n")    import shutil    for text_file in glob.iglob(label_path + '/*.txt'):        n= os.path.basename(text_file)        try:            # copy the  original txt too in the final path            shutil.copy2(text_file, os.path.join(label_final_path,n))        except Exception:            # problem when the same copy already exists, so we just pass            pass        shutil.copy2(text_file, os.path.join(label_final_path,n[:-4].replace('_original', '') + '_p.txt'))        shutil.copy2(text_file, os.path.join(label_final_path,n[:-4].replace('_original', '') + '_c.txt'))      #  shutil.copy2(text_file, text_file[:-4] + '_s.txt')        shutil.copy2(text_file, os.path.join(label_final_path,n[:-4].replace('_original', '') + '_mr.txt'))        shutil.copy2(text_file, os.path.join(label_final_path,n[:-4].replace('_original', '') + '_r.txt'))    print("Labels conversion done!\n")