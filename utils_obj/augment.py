from skimage import featureimport globfrom PIL import Image, ImageFilterfrom PIL import ImageEnhancefrom skimage.io import imsave, imreadimport albumentations as Aimport cv2from skimage.io import imreadfrom skimage.filters import prewitt_h, prewitt_vimport matplotlib.pyplot as pltdef augment(path):    # path=input("Please enter absolute path to images and labels (they must be in the same folder):\n")    # below is albumentations augmentation by random process --2 different augmentation    transform = A.Compose([        A.RandomBrightnessContrast(p=0.4),        A.OneOf([            A.IAAAdditiveGaussianNoise(),            A.GaussNoise(),        ], p=0.3),        A.OneOf([            A.MotionBlur(p=.5),            A.MedianBlur(blur_limit=3, p=0.6),  # mrandom            A.Blur(blur_limit=3, p=0.6),        ], p=0.2),        A.HueSaturationValue(p=0.7),        A.RGBShift(p=0.6),        A.InvertImg(p=0.4),    ])    transform2 = A.Compose([        A.RandomBrightnessContrast(p=0.6),        A.OneOf([            A.IAAAdditiveGaussianNoise(),            A.GaussNoise(),        ], p=0.4),        A.OneOf([            A.MotionBlur(p=.2),            A.MedianBlur(blur_limit=3, p=0.1),            A.Blur(blur_limit=3, p=0.1),        ], p=0.2),        A.HueSaturationValue(),        A.RGBShift(),    ])    for image_file in glob.iglob(path + '/*.jpg'):        # feature extractions        # below is prewit kernel to exaggarate edges        # Generate noisy image of a square        im = imread(image_file, as_gray=True)        edges_prewitt_horizontal = prewitt_h(im)        edges_prewitt_vertical = prewitt_v(im)        imsave(image_file[:-4] + '_p.jpg', edges_prewitt_vertical, cmap='gray')        # Compute the Canny filter for two values of sigma        # below is canny edge detection        im = imread(image_file, as_gray=True)        edges1 = feature.canny(im)        plt.imsave(image_file[:-4] + '_c.jpg', edges1, cmap=plt.cm.gray)        # os.remove(image_file)        # below is sharpening images        img = Image.open(image_file)        enhancer = ImageEnhance.Sharpness(img)        factor = 5  # 2 should be sufficient but to be sure.        im_s_1 = enhancer.enhance(factor)        im_s_1.save(image_file[:-4] + '_s.jpg')        # below two are albumentations images        image = cv2.imread(image_file)        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)        transformed = transform(image=image)        transformed_image = transformed["image"]        cv2.imwrite(image_file[:-4] + '_mr.jpg', transformed_image)        image = cv2.imread(image_file)        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)        transformed2 = transform2(image=image)        transformed2_image = transformed2["image"]        cv2.imwrite(image_file[:-4] + '_r.jpg', transformed2_image)    print("Image Conversion done!\n")    import shutil    for text_file in glob.iglob(path + '/*.txt'):        shutil.copy2(text_file, text_file[:-4] + '_p.txt')        shutil.copy2(text_file, text_file[:-4] + '_c.txt')        # os.remove(text_file)        shutil.copy2(text_file, text_file[:-4] + '_s.txt')        shutil.copy2(text_file, text_file[:-4] + '_mr.txt')        shutil.copy2(text_file, text_file[:-4] + '_r.txt')    print("Labels conversion done!\n")   